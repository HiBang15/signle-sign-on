// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package database

import (
	"context"
	"database/sql"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS (SELECT id, first_name, last_name, full_name, address, email, password, phone_number, accepts_marketing, code_verify_email, verify_email, password_cost, registration_time, email_confirmation_token, user_status, password_reminder_token, password_reminder_expire, created_at, deleted_at, updated_at FROM user_account WHERE email = $1 AND deleted_at is null)
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkPhoneNoExists = `-- name: CheckPhoneNoExists :one
SELECT EXISTS (SELECT id, first_name, last_name, full_name, address, email, password, phone_number, accepts_marketing, code_verify_email, verify_email, password_cost, registration_time, email_confirmation_token, user_status, password_reminder_token, password_reminder_expire, created_at, deleted_at, updated_at FROM user_account WHERE phone_number = $1 AND deleted_at is null)
`

func (q *Queries) CheckPhoneNoExists(ctx context.Context, phoneNumber sql.NullString) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkPhoneNoExists, phoneNumber)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO user_account (
    "first_name", "last_name" , "full_name", "address", "email", "password", "phone_number", "accepts_marketing", "code_verify_email", "verify_email", "password_cost", "registration_time", "email_confirmation_token" , "user_status", "password_reminder_token", "password_reminder_expire"
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16
)
RETURNING id, first_name, last_name, full_name, address, email, password, phone_number, accepts_marketing, code_verify_email, verify_email, password_cost, registration_time, email_confirmation_token, user_status, password_reminder_token, password_reminder_expire, created_at, deleted_at, updated_at
`

type CreateUserAccountParams struct {
	FirstName              sql.NullString `json:"first_name"`
	LastName               sql.NullString `json:"last_name"`
	FullName               sql.NullString `json:"full_name"`
	Address                sql.NullString `json:"address"`
	Email                  string         `json:"email"`
	Password               string         `json:"password"`
	PhoneNumber            sql.NullString `json:"phone_number"`
	AcceptsMarketing       bool           `json:"accepts_marketing"`
	CodeVerifyEmail        sql.NullInt32  `json:"code_verify_email"`
	VerifyEmail            sql.NullBool   `json:"verify_email"`
	PasswordCost           sql.NullString `json:"password_cost"`
	RegistrationTime       sql.NullTime   `json:"registration_time"`
	EmailConfirmationToken sql.NullString `json:"email_confirmation_token"`
	UserStatus             sql.NullInt32  `json:"user_status"`
	PasswordReminderToken  sql.NullString `json:"password_reminder_token"`
	PasswordReminderExpire sql.NullTime   `json:"password_reminder_expire"`
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, createUserAccount,
		arg.FirstName,
		arg.LastName,
		arg.FullName,
		arg.Address,
		arg.Email,
		arg.Password,
		arg.PhoneNumber,
		arg.AcceptsMarketing,
		arg.CodeVerifyEmail,
		arg.VerifyEmail,
		arg.PasswordCost,
		arg.RegistrationTime,
		arg.EmailConfirmationToken,
		arg.UserStatus,
		arg.PasswordReminderToken,
		arg.PasswordReminderExpire,
	)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.Address,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.AcceptsMarketing,
		&i.CodeVerifyEmail,
		&i.VerifyEmail,
		&i.PasswordCost,
		&i.RegistrationTime,
		&i.EmailConfirmationToken,
		&i.UserStatus,
		&i.PasswordReminderToken,
		&i.PasswordReminderExpire,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserAccountByUsernameOrEmail = `-- name: GetUserAccountByUsernameOrEmail :one
SELECT id, first_name, last_name, full_name, address, email, password, phone_number, accepts_marketing, code_verify_email, verify_email, password_cost, registration_time, email_confirmation_token, user_status, password_reminder_token, password_reminder_expire, created_at, deleted_at, updated_at FROM user_account WHERE email = $1 AND deleted_at is null LIMIT 1
`

func (q *Queries) GetUserAccountByUsernameOrEmail(ctx context.Context, email string) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, getUserAccountByUsernameOrEmail, email)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.Address,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.AcceptsMarketing,
		&i.CodeVerifyEmail,
		&i.VerifyEmail,
		&i.PasswordCost,
		&i.RegistrationTime,
		&i.EmailConfirmationToken,
		&i.UserStatus,
		&i.PasswordReminderToken,
		&i.PasswordReminderExpire,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UpdatedAt,
	)
	return i, err
}
